// index.js
import express from "express";
import fs from "fs";
import admin from "firebase-admin";
import fetch from "node-fetch";
import dotenv from "dotenv";
import { Trino } from "trino-client";
import cors from 'cors';

dotenv.config();

const app = express();
app.use(express.json());
app.use(cors({ origin: 'http://localhost:5173' }))

const PORT = process.env.PORT || 3000;
const TRINO_SERVER = process.env.TRINO_SERVER || "http://localhost:8080";
const TRINO_USER = process.env.TRINO_USER || "admin";
const TRINO_CATALOG = process.env.TRINO_CATALOG || "mysql";
const TRINO_SCHEMA = process.env.TRINO_SCHEMA || "ecommerce_bi";
const SUPERSET_URL = process.env.SUPERSET_URL;
const SUPERSET_ADMIN_USER = process.env.SUPERSET_ADMIN_USER;
const SUPERSET_ADMIN_PASS = process.env.SUPERSET_ADMIN_PASS;

const log = (type, msg) =>
  console.log(`[${new Date().toISOString()}] [${type}] ${msg}`);

const sendResponse = (
  res,
  status,
  success,
  message,
  data = null,
  error = null
) => res.status(status).json({ success, message, data, error });

console.log(`[INIT] Starting Chatbot Server on port ${PORT}`);
console.log(`[INIT] Trino: ${TRINO_SERVER}/${TRINO_CATALOG}.${TRINO_SCHEMA}`);

async function getSupersetToken() {
  log("SUPERSET", "ƒêang l·∫•y Access Token b·∫±ng t√†i kho·∫£n Admin...");
  try {
    const response = await fetch(`${SUPERSET_URL}/api/v1/security/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        username: SUPERSET_ADMIN_USER,
        password: SUPERSET_ADMIN_PASS,
        provider: "db",
      }),
    });
    const json = await response.json();
    if (!response.ok) throw new Error(json.msg || "Kh√¥ng th·ªÉ l·∫•y token");

    log("SUPERSET", "L·∫•y Access Token th√†nh c√¥ng!");
    return json.access_token;
  } catch (err) {
    log("ERROR", `L·ªói Superset Token: ${err.message}`);
    return null;
  }
}

try {
  const serviceAccount = JSON.parse(
    fs.readFileSync(process.env.FIREBASE_SERVICE_ACCOUNT, "utf8")
  );
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: `https://bi-solution-4441c-default-rtdb.asia-southeast1.firebasedatabase.app/`,
  });
  console.log("[Firebase] Connected successfully");
} catch (error) {
  console.error("[Firebase] Initialization failed:", error.message);
}
const db = admin.database();

const verifyFirebaseToken = async (req, res, next) => {
  log("AUTH", "Verifying token...");
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    log("AUTH", "Failed: Missing or invalid Authorization header");
    return sendResponse(res, 401, false, "Token kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã thi·∫øu");
  }

  const idToken = authHeader.split("Bearer ")[1];

  try {
    const decodedToken = await admin.auth().verifyIdToken(idToken);
    req.user = decodedToken;
    log("AUTH", `Success: Token verified for user ${req.user.uid}`);
    next();
  } catch (error) {
    log("AUTH", `Failed: ${error.message}`);
    return sendResponse(res, 403, false, "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
  }
};

const trinoClient = Trino.create({
  server: TRINO_SERVER,
  user: TRINO_USER,
});
console.log(`[Trino] Connected to ${trinoClient.server}`);

const runTrinoQuery = async (sqlQuery) => {
  log("TRINO", `Executing: ${sqlQuery}`);
  if (!sqlQuery.toLowerCase().startsWith("select")) {
    throw new Error("Ch·ªâ h·ªó tr·ª£ c√¢u l·ªánh SELECT");
  }

  try {
    let response = await fetch(`${TRINO_SERVER}/v1/statement`, {
      method: "POST",
      headers: {
        "X-Trino-User": TRINO_USER,
        "X-Trino-Catalog": TRINO_CATALOG,
        "X-Trino-Schema": TRINO_SCHEMA,
      },
      body: sqlQuery,
    });

    let result = await response.json();
    let data = result.data || [];
    let columns = result.columns?.map((c) => c.name) || [];

    while (result.nextUri) {
      const nextRes = await fetch(result.nextUri);
      result = await nextRes.json();
      if (result.data) data.push(...result.data);
      if (result.columns) columns = result.columns.map((c) => c.name);
    }

    return data.map((row) => {
      const obj = {};
      columns.forEach((c, i) => (obj[c] = row[i]));
      return obj;
    });
  } catch (err) {
    log("ERROR", `Trino query failed: ${err.message}`);
    throw new Error(`Trino Error: ${err.message}`);
  }
};

const openSupersetDashboard = async (dashboardName) => {
  log("SUPERSET", `ƒêang t√¨m dashboard t√™n: ${dashboardName}`);

  const token = await getSupersetToken();
  if (!token) {
    throw new Error("Kh√¥ng th·ªÉ x√°c th·ª±c v·ªõi Superset");
  }

  const filterQuery = `(filters:!((col:dashboard_title,opr:ct,value:'${dashboardName}')))`;
  const searchUrl = `${SUPERSET_URL}/api/v1/dashboard/?q=${encodeURIComponent(
    filterQuery
  )}`;

  const response = await fetch(searchUrl, {
    method: "GET",
    headers: { Authorization: `Bearer ${token}` },
  });

  const json = await response.json();
  if (!response.ok) {
    throw new Error("L·ªói khi t√¨m ki·∫øm dashboard");
  }

  if (json.count === 0) {
    return { name: dashboardName, url: null, found: false };
  }

  const dashboard = json.result[0];
  return {
    name: dashboard.dashboard_title,
    url: `${SUPERSET_URL}${dashboard.url}`,
    found: true,
  };
};

const GEMINI_MODEL = process.env.GEMINI_MODEL;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_ENDPOINT = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent?key=${GEMINI_API_KEY}`;

const GEMINI_SAFETY = [
  { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_NONE" },
  { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_NONE" },
  { category: "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold: "BLOCK_NONE" },
  { category: "HARM_CATEGORY_DANGEROUS_CONTENT", threshold: "BLOCK_NONE" },
];

async function callGemini(prompt) {
  const body = {
    contents: [{ parts: [{ text: prompt }] }],
    safetySettings: GEMINI_SAFETY,
  };

  const res = await fetch(GEMINI_ENDPOINT, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body),
  });

  const json = await res.json();
  return json?.candidates?.[0]?.content?.parts?.[0]?.text || "";
}

// H√†m retry cho Gemini
async function callGeminiWithRetry(prompt, maxRetries = 2) {
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await callGemini(prompt);
    } catch (err) {
      if (i === maxRetries - 1) throw err;
      log("WARN", `Gemini retry ${i + 1}/${maxRetries}`);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
}

// Validation cho classification
function validateClassification(classification) {
  if (!classification || !classification.type) {
    return { type: "general_query" };
  }
  
  if (classification.type === "bi_query") {
    if (!classification.query || !classification.query.toLowerCase().includes('select')) {
      log("WARN", "Invalid SQL query, fallback to general");
      return { type: "general_query" };
    }
  }
  
  if (classification.type === "open_dashboard") {
    if (!classification.dashboard_name) {
      log("WARN", "Missing dashboard_name, fallback to general");
      return { type: "general_query" };
    }
  }
  
  return classification;
}

app.post("/ask", verifyFirebaseToken, async (req, res) => {
  const { question } = req.body;
  const userId = req.user.uid;
  
  if (!question || !userId) {
    return sendResponse(res, 400, false, "Thi·∫øu question ho·∫∑c userId");
  }

  log("USER", `[${userId}] ${question}`);

  try {
    // --- PH√ÇN LO·∫†I C√ÇU H·ªéI v·ªõi Schema ƒë·∫ßy ƒë·ªß ---
    const classificationPrompt = `
B·∫°n l√† tr·ª£ l√Ω BI th√¥ng minh ph√¢n t√≠ch d·ªØ li·ªáu e-commerce.

**SCHEMA DATABASE (mysql.ecommerce_bi):**

üìã **B·∫¢NG CH√çNH:**
1. **customers** (Kh√°ch h√†ng)
   - customer_id (INT) - M√£ kh√°ch h√†ng
   - first_name (VARCHAR) - T√™n
   - last_name (VARCHAR) - H·ªç
   - email (VARCHAR) - Email
   - city (VARCHAR) - Th√†nh ph·ªë
   - country (VARCHAR) - Qu·ªëc gia
   - created_at (TIMESTAMP) - Ng√†y ƒëƒÉng k√Ω

2. **products** (S·∫£n ph·∫©m)
   - product_id (INT) - M√£ s·∫£n ph·∫©m
   - product_name (VARCHAR) - T√™n s·∫£n ph·∫©m
   - category (VARCHAR) - Danh m·ª•c (Electronics, Furniture, Home, Accessories)
   - price (DECIMAL) - Gi√° b√°n
   - cost (DECIMAL) - Gi√° v·ªën

3. **orders** (ƒê∆°n h√†ng)
   - order_id (INT) - M√£ ƒë∆°n h√†ng
   - customer_id (INT) - M√£ kh√°ch h√†ng
   - order_date (DATE) - Ng√†y ƒë·∫∑t h√†ng
   - status (VARCHAR) - Tr·∫°ng th√°i (completed, pending, shipped)
   - total_amount (DECIMAL) - T·ªïng ti·ªÅn

4. **order_items** (Chi ti·∫øt ƒë∆°n h√†ng)
   - order_item_id (INT) - M√£ chi ti·∫øt
   - order_id (INT) - M√£ ƒë∆°n h√†ng
   - product_id (INT) - M√£ s·∫£n ph·∫©m
   - quantity (INT) - S·ªë l∆∞·ª£ng
   - unit_price (DECIMAL) - ƒê∆°n gi√°

üìç **B·∫¢NG ƒê·ªäA L√ù & PH√ÇN T√çCH:**
5. **poi_locations** (ƒêi·ªÉm b√°n h√†ng)
   - poi_id, poi_name, city, country, latitude, longitude

6. **employee_counts** (S·ªë nh√¢n vi√™n)
   - poi_id, employee_count

7. **sales_regions** (Khu v·ª±c b√°n h√†ng)
   - region_id, region_name, center_latitude, center_longitude, region_geojson

8. **country_region_map** (√Ånh x·∫° qu·ªëc gia - khu v·ª±c)
   - country, region_name

üìä **VIEW PH√ÇN T√çCH:**
9. **poi_sales_analysis** - Ph√¢n t√≠ch doanh s·ªë theo ƒëi·ªÉm b√°n
10. **sales_region_sales** - Doanh s·ªë theo khu v·ª±c

**NHI·ªÜM V·ª§:** Ph√¢n t√≠ch c√¢u h·ªèi v√† tr·∫£ v·ªÅ JSON thu·∫ßn (KH√îNG c√≥ markdown, KH√îNG c√≥ \`\`\`):

**1Ô∏è‚É£ BI Query** - Khi c·∫ßn truy v·∫•n d·ªØ li·ªáu:
{"type":"bi_query","engine":"trino","query":"SELECT ... FROM mysql.ecommerce_bi.table_name ..."}

**V√ç D·ª§ BI QUERY:**
- "Doanh thu h√¥m nay?" 
  ‚Üí {"type":"bi_query","engine":"trino","query":"SELECT SUM(total_amount) as doanh_thu FROM mysql.ecommerce_bi.orders WHERE order_date = CURRENT_DATE"}

- "Top 5 s·∫£n ph·∫©m b√°n ch·∫°y?"
  ‚Üí {"type":"bi_query","engine":"trino","query":"SELECT p.product_name, SUM(oi.quantity) as tong_ban FROM mysql.ecommerce_bi.order_items oi JOIN mysql.ecommerce_bi.products p ON oi.product_id = p.product_id GROUP BY p.product_name ORDER BY tong_ban DESC LIMIT 5"}

- "C√≥ bao nhi√™u kh√°ch h√†ng?"
  ‚Üí {"type":"bi_query","engine":"trino","query":"SELECT COUNT(*) as so_khach FROM mysql.ecommerce_bi.customers"}

- "Doanh thu theo danh m·ª•c s·∫£n ph·∫©m?"
  ‚Üí {"type":"bi_query","engine":"trino","query":"SELECT p.category, SUM(o.total_amount) as doanh_thu FROM mysql.ecommerce_bi.orders o JOIN mysql.ecommerce_bi.order_items oi ON o.order_id = oi.order_id JOIN mysql.ecommerce_bi.products p ON oi.product_id = p.product_id GROUP BY p.category ORDER BY doanh_thu DESC"}

- "Top 10 kh√°ch h√†ng chi ti√™u nhi·ªÅu nh·∫•t?"
  ‚Üí {"type":"bi_query","engine":"trino","query":"SELECT CONCAT(c.first_name, ' ', c.last_name) as ten_khach, c.email, SUM(o.total_amount) as tong_chi FROM mysql.ecommerce_bi.customers c JOIN mysql.ecommerce_bi.orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.first_name, c.last_name, c.email ORDER BY tong_chi DESC LIMIT 10"}

- "Doanh s·ªë theo qu·ªëc gia?"
  ‚Üí {"type":"bi_query","engine":"trino","query":"SELECT c.country, COUNT(DISTINCT o.order_id) as so_don, SUM(o.total_amount) as doanh_thu FROM mysql.ecommerce_bi.customers c JOIN mysql.ecommerce_bi.orders o ON c.customer_id = o.customer_id GROUP BY c.country ORDER BY doanh_thu DESC"}

- "L·ª£i nhu·∫≠n theo s·∫£n ph·∫©m?"
  ‚Üí {"type":"bi_query","engine":"trino","query":"SELECT p.product_name, SUM((oi.unit_price - p.cost) * oi.quantity) as loi_nhuan FROM mysql.ecommerce_bi.order_items oi JOIN mysql.ecommerce_bi.products p ON oi.product_id = p.product_id GROUP BY p.product_name ORDER BY loi_nhuan DESC"}

- "Ph√¢n t√≠ch theo ƒëi·ªÉm b√°n?"
  ‚Üí {"type":"bi_query","engine":"trino","query":"SELECT * FROM mysql.ecommerce_bi.poi_sales_analysis ORDER BY total_sales DESC"}

**2Ô∏è‚É£ Open Dashboard** - Khi y√™u c·∫ßu m·ªü/xem dashboard:
{"type":"open_dashboard","dashboard_name":"t√™n dashboard"}

T·ª´ kh√≥a: "m·ªü", "xem", "hi·ªÉn th·ªã", "cho t√¥i xem", "dashboard"
V√ç D·ª§:
- "M·ªü dashboard doanh thu" ‚Üí {"type":"open_dashboard","dashboard_name":"doanh thu"}
- "Cho xem dashboard b√°n h√†ng" ‚Üí {"type":"open_dashboard","dashboard_name":"b√°n h√†ng"}

**3Ô∏è‚É£ General Query** - C√¢u h·ªèi chung (ch√†o h·ªèi, h∆∞·ªõng d·∫´n, gi·∫£i th√≠ch):
{"type":"general_query"}

V√ç D·ª§: "Xin ch√†o", "B·∫°n gi√∫p ƒë∆∞·ª£c g√¨?", "H·ªá th·ªëng c√≥ g√¨?"

**L∆ØU √ù QUAN TR·ªåNG:**
‚úÖ Query ph·∫£i h·ª£p l·ªá v·ªõi Trino SQL
‚úÖ LU√îN d√πng t√™n ƒë·∫ßy ƒë·ªß: mysql.ecommerce_bi.table_name
‚úÖ CH·ªà d√πng SELECT, KH√îNG INSERT/UPDATE/DELETE
‚úÖ V·ªõi ng√†y: d√πng CURRENT_DATE, CURRENT_TIMESTAMP
‚úÖ V·ªõi th√°ng/nƒÉm: d√πng MONTH(), YEAR(), DATE_TRUNC()
‚úÖ JOIN ƒë√∫ng foreign key: customers ‚Üî orders ‚Üî order_items ‚Üî products
‚úÖ D√πng alias r√µ r√†ng ƒë·ªÉ d·ªÖ ƒë·ªçc k·∫øt qu·∫£

**B√ÇY GI·ªú PH√ÇN T√çCH C√ÇU H·ªéI N√ÄY:**
C√¢u h·ªèi: "${question}"

Tr·∫£ v·ªÅ JSON thu·∫ßn, KH√îNG gi·∫£i th√≠ch th√™m:`;

    let classificationText = await callGeminiWithRetry(classificationPrompt);
    classificationText = classificationText
      .replace(/```json/g, "")
      .replace(/```/g, "")
      .trim();

    let classification;
    try {
      classification = JSON.parse(classificationText);
    } catch {
      classification = { type: "general_query" };
    }

    // Validate classification
    classification = validateClassification(classification);
    log("CLASSIFY", JSON.stringify(classification));

    let finalAnswer = "";
    let debugData = {};

    if (classification.type === "bi_query") {
      const query = classification.query;
      try {
        const queryResults = await runTrinoQuery(query);

        const summaryPrompt = `
B·∫°n l√† chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu e-commerce.

**C√ÇU H·ªéI:** "${question}"

**D·ªÆ LI·ªÜU TH·ª∞C T·∫æ:**
${JSON.stringify(queryResults, null, 2)}

**Y√äU C·∫¶U TR·∫¢ L·ªúI:**
1. ‚úÖ Tr·∫£ l·ªùi TR·ª∞C TI·∫æP c√¢u h·ªèi b·∫±ng ti·∫øng Vi·ªát
2. ‚úÖ N√™u con s·ªë/insight quan tr·ªçng nh·∫•t TR∆Ø·ªöC
3. ‚úÖ N·∫øu c√≥ nhi·ªÅu d·ªØ li·ªáu: t√≥m t·∫Øt top 3-5 k·∫øt qu·∫£ n·ªïi b·∫≠t
4. ‚úÖ Th√™m nh·∫≠n x√©t ng·∫Øn g·ªçn (n·∫øu c·∫ßn thi·∫øt)
5. ‚úÖ ƒê·ªãnh d·∫°ng d·ªÖ ƒë·ªçc (d√πng s·ªë, bullet points n·∫øu c·∫ßn)
6. ‚úÖ L√†m tr√≤n s·ªë ti·ªÅn (VD: 1,329.98 ‚Üí 1,330 ho·∫∑c 1.33K)
7. ‚ùå KH√îNG l·∫∑p l·∫°i c√¢u h·ªèi
8. ‚ùå KH√îNG gi·∫£i th√≠ch k·ªπ thu·∫≠t

**V√ç D·ª§ TR·∫¢ L·ªúI T·ªêT:**
‚úÖ "Doanh thu h√¥m nay l√† 125.5 tri·ªáu ƒë·ªìng, tƒÉng 15% so v·ªõi h√¥m qua."
‚úÖ "Top 3 s·∫£n ph·∫©m b√°n ch·∫°y:
   1. Laptop Pro - 250 ƒë∆°n
   2. Wireless Mouse - 180 ƒë∆°n  
   3. Desk Chair - 120 ƒë∆°n"
‚úÖ "Hi·ªán c√≥ 1,234 kh√°ch h√†ng, trong ƒë√≥ 856 l√† kh√°ch VIP (ƒë√£ mua >5 ƒë∆°n). T·∫≠p trung nhi·ªÅu ·ªü New York (350 kh√°ch) v√† London (280 kh√°ch)."
‚úÖ "L·ª£i nhu·∫≠n g·ªôp: 45.2 tri·ªáu (margin 35%). Danh m·ª•c Electronics ƒë√≥ng g√≥p 60% l·ª£i nhu·∫≠n."

Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch (2-4 c√¢u):`;

        finalAnswer = await callGeminiWithRetry(summaryPrompt);
        debugData = { 
          query, 
          resultCount: queryResults.length,
          sampleData: queryResults.slice(0, 3) // Ch·ªâ show 3 d√≤ng ƒë·∫ßu
        };
      } catch (err) {
        return sendResponse(
          res,
          500,
          false,
          "L·ªói khi ch·∫°y truy v·∫•n BI",
          null,
          err.message
        );
      }
    } else if (classification.type === "open_dashboard") {
      const dashboardName = classification.dashboard_name;
      const dashboard = await openSupersetDashboard(dashboardName);

      if (dashboard.found) {
        finalAnswer = `ƒê√£ t√¨m th·∫•y dashboard "${dashboard.name}". B·∫°n c√≥ th·ªÉ xem t·∫°i: ${dashboard.url}`;
      } else {
        finalAnswer = `R·∫•t ti·∫øc, t√¥i kh√¥ng t√¨m th·∫•y dashboard n√†o c√≥ t√™n "${dashboardName}". Vui l√≤ng ki·ªÉm tra l·∫°i t√™n dashboard ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n.`;
      }
      debugData = { dashboard };
    } else {
      // General query
      const generalPrompt = `
B·∫°n l√† tr·ª£ l√Ω BI th√¥ng minh cho h·ªá th·ªëng e-commerce.

**KH·∫¢ NƒÇNG C·ª¶A B·∫†N:**
üîç Truy v·∫•n d·ªØ li·ªáu:
- Doanh thu, ƒë∆°n h√†ng (theo ng√†y/th√°ng/nƒÉm, theo qu·ªëc gia, theo danh m·ª•c)
- S·∫£n ph·∫©m (b√°n ch·∫°y, t·ªìn kho, l·ª£i nhu·∫≠n)
- Kh√°ch h√†ng (s·ªë l∆∞·ª£ng, chi ti√™u, ph√¢n b·ªë ƒë·ªãa l√Ω)
- Ph√¢n t√≠ch ƒëi·ªÉm b√°n h√†ng (POI) v√† khu v·ª±c

üìä M·ªü dashboard ph√¢n t√≠ch:
- Dashboard doanh thu, b√°n h√†ng, kh√°ch h√†ng, s·∫£n ph·∫©m

üí° Tr·∫£ l·ªùi c√¢u h·ªèi chung:
- H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
- Gi·∫£i th√≠ch v·ªÅ BI, ph√¢n t√≠ch d·ªØ li·ªáu
- T∆∞ v·∫•n chi·∫øn l∆∞·ª£c kinh doanh

**D·ªÆ LI·ªÜU C√ì S·∫¥N:**
üì¶ S·∫£n ph·∫©m: Electronics, Furniture, Home, Accessories
üåç Qu·ªëc gia: USA, UK, Canada, Australia, Germany
üë• Kh√°ch h√†ng: 10+ customers v·ªõi l·ªãch s·ª≠ mua h√†ng
üìç ƒêi·ªÉm b√°n: New York, London, Toronto, Sydney, Berlin

C√¢u h·ªèi: "${question}"

Tr·∫£ l·ªùi th√¢n thi·ªán, h·ªØu √≠ch b·∫±ng ti·∫øng Vi·ªát (2-4 c√¢u):`;
      
      finalAnswer = await callGeminiWithRetry(generalPrompt);
    }

    // --- L∆ØU FIREBASE ---
    await db.ref(`/chats/${userId}`).push({
      question,
      answer: finalAnswer,
      classification: classification.type,
      createdAt: new Date().toISOString(),
    });

    // --- PH·∫¢N H·ªíI ---
    return sendResponse(res, 200, true, "Th√†nh c√¥ng", {
      answer: finalAnswer,
      type: classification.type,
      timestamp: new Date().toISOString(),
      ...(debugData.query && { sql: debugData.query }),
      ...(debugData.resultCount !== undefined && { 
        resultCount: debugData.resultCount 
      }),
      ...(debugData.sampleData && { 
        sampleData: debugData.sampleData 
      }),
      ...(debugData.dashboard && { 
        dashboard: debugData.dashboard 
      })
    });
  } catch (err) {
    log("ERROR", err.message);
    return sendResponse(
      res,
      500,
      false,
      "ƒê√£ x·∫£y ra l·ªói m√°y ch·ªß",
      null,
      err.message
    );
  }
});

app.listen(PORT, () => {
  console.log(`[READY] Chatbot API running at http://localhost:${PORT}`);
});